generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    license String?

    // Relations
    userRoles   UserRole[] // Les rôles globaux de l'utilisateur
    ownedTeams  Team[]       @relation("TeamOwner") // Les équipes dont l'utilisateur est propriétaire
    teamMembers TeamMember[] // Les équipes auxquelles l'utilisateur appartient

    // Stripe
    stripeCustomerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Subscription Subscription?
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Role {
    id    Int    @id @default(autoincrement())
    name  String @unique
    level Int

    // Relations
    userRoles UserRole[] // Les utilisateurs ayant ce rôle
}

model UserRole {
    id     String @id @default(uuid())
    userId String
    roleId Int

    // Relations
    user User @relation(fields: [userId], references: [id])
    role Role @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

model Team {
    id      String @id @default(uuid())
    name    String
    ownerId String

    // Relations
    owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
    teamMembers TeamMember[] // Les membres de l'équipe
}

model TeamMember {
    id     String @id @default(uuid())
    teamId String
    userId String

    // Relations
    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@unique([teamId, userId])
}

model Subscription {
    id                   String    @id @default(uuid())
    subscriptionStripeId String
    productId            String
    active               Boolean
    userId               String    @unique
    startedAt            DateTime
    endedAt              DateTime?

    // Relations
    user    User    @relation(fields: [userId], references: [id])
}
